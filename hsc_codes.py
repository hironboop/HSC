# -*- coding: utf-8 -*-
"""HSC codes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFdkPuE-k4Z_827D8z-KU0fZ3nZeFMIX
"""

import pandas as pd


data = pd.read_csv('/content/duplicates data - Sheet1.csv')

dataclean = data.drop_duplicates()


dataclean.to_csv('cleaned_file.csv', index=False)

print("Clean data")

import pandas as pd


cleaned_df = pd.read_csv('cleaned_file.csv')


display(cleaned_df)

def check_conflicts(interactions):
    """
    Checks for conflicting interactions (e.g., A activates B and A inhibits B)
    in a list of interaction tuples (source, target, type).
    """
    conflicts = []
    interaction_dict = {}

    for source, target, interaction_type in interactions:
        pair = (source, target)
        if pair not in interaction_dict:
            interaction_dict[pair] = {interaction_type}
        else:
            interaction_dict[pair].add(interaction_type)

    for pair, types in interaction_dict.items():
        if "Activates" in types and "Inhibits" in types:
            conflicts.append(f"Conflict detected: {pair[0]} activates and inhibits {pair[1]}")
        if "activates" in types and "inhibits" in types:
            conflicts.append(f"Conflict detected: {pair[0]} activates and inhibits {pair[1]} (case-insensitive)")

    return conflicts
edges_from_graph_drawing = [
    ("GATA-2", "GATA-2", "Activates"),
    ("GATA-1", "GATA-1", "Activates"),
    ("GATA-2", "PU.1", "Inhibits"),
    ("PU.1", "GATA-2", "Inhibits"),
    ("GATA-2", "GATA-1", "Activates"),
    ("GATA-1", "EKLF", "Activates"),
    ("GATA-1", "Fli-1", "Activates"),
    ("Fli-1", "EKLF", "Inhibits"),
    ("EKLF", "Fli-1", "Inhibits"),
    ("PU.1", "cJun", "Activates"),
    ("cJun", "EgrNab", "Activates"),
    ("EgrNab", "Gfi-1", "Inhibits"),
    ("Gfi-1", "EgrNab", "Inhibits"),
    ("C/EBPα", "Gfi-1", "Activates"),
    ("PU.1", "C/EBPα", "Activates"),
    ("C/EBPα", "PU.1", "Activates"),
    ("PU.1", "SCL", "Inhibits"),
    ("SCL", "GATA-1", "Activates")
]


interactions_list1 = [
    ("Thrombopoietin", "vWF+ HSC", "Activates"),
    ("SCF", "HSC", "Activates"),
    ("CXCL12", "HSC", "Activates"),
    ("Notch", "HSC", "Activates"),
    ("Angiopoietin", "HSC", "Activates"),
    ("M-CSF", "HSC", "Activates"),
    ("IFN-γ", "HSC", "Activates"),
    ("TNF-α", "HSC", "Inhibits"),
    ("PU.1", "Myeloid Genes", "Activates"),
    ("GATA-1", "Erythroid/Megakaryocyte Genes", "Activates"),
    ("Egr1", "Monocyte Genes", "Activates"),
    ("Aged Niche", "HSC", "Inhibits")
]

interactions_list2 = [
    ("Gata2", "Scl", "activates"),
    ("Fli1", "Gata2", "activates"),
    ("Scl", "Fli1", "activates"),
    ("Bmp4", "Fli1", "activates"),
    ("Bmp4", "Gata2", "activates"),
    ("Notch1", "Gata2", "activates"),
    ("Hedgehog/VEGF", "Notch1", "activates"),
    ("Gata1", "Gata2", "inhibits"),
    ("Gata1", "Scl", "activates"),
    ("Scl", "Runx1", "activates"),
    ("ATF3", "IL6", "inhibits"),
    ("ATF3", "IL12b", "inhibits"),
    ("ATF3", "NF-kB", "cooperates"),
    ("ATF3", "AP1", "cooperates"),
    ("PU.1", "Csf1r", "maintains"),
    ("Pax5", "Csf1r", "represses"),
    ("Oct4", "miRNA genes", "activates"),
    ("Sox2", "miRNA genes", "activates"),
    ("Nanog", "miRNA genes", "activates"),
    ("miRNAs", "Target genes", "represses"),
    ("MYC", "Multiple genes", "activates"),
]

interactions_list3 = [
    ("GATA1", "Erythroid genes", "Activates"),
    ("GATA1", "PU.1", "Inhibits"),
    ("PU.1", "Myeloid genes", "Activates"),
    ("PU.1", "GATA1", "Inhibits"),
    ("GFI1", "IRF8", "Inhibits"),
    ("IRF8", "GFI1", "Inhibits"),
    ("GATA1", "GATA1", "Activates"),
    ("PU.1", "PU.1", "Activates"),
    ("GATA2", "TAL1", "Activates"),
    ("TAL1", "FLI1", "Activates"),
    ("FLI1", "GATA2", "Activates"),
    ("Upstream TF", "Target TF", "Activates"),
    ("MPP2/MPP3", "GMP", "Expands"),
    ("Inflammation", "MPP2/MPP3", "Activates"),
    ("CDK6", "Quiescence", "Inhibits"),
    ("MYC", "Protein Synthesis", "Activates"),
    ("p57/p27", "HSC Quiescence", "Maintains"),
    ("Retinoic Acid", "HSC Dormancy", "Maintains"),
    ("RUNX1", "Chromatin", "Activates"),
    ("Cytokines", "Lineage TFs", "Instructs"),
    ("HSPCs", "Megakaryocyte lineage", "Differentiates"),
    ("Leukemia mutations", "Stem-like state", "Alters"),
    ("BCR-ABL", "Differentiation Program", "Disrupts")
]

interactions_list4 = [
    ("Elf1", "+19 Scl enhancer", "Activates"),
    ("Fli1", "+19 Scl enhancer", "Activates"),
    ("Gata2", "+19 Scl enhancer", "Activates"),
    ("GATA factors", "+40 Scl enhancer", "Activates"),
    ("Scl/Tal1", "Lmo2", "Cofactor"),
    ("Gata1/2", "Lmo2", "Cofactor"),
    ("Ldb1", "Lmo2", "Cofactor"),
    ("E2A", "Lmo2", "Cofactor"),
    ("Scl", "Gfi1 enhancer", "Activates"),
    ("Gata2", "Gfi1 enhancer", "Activates"),
    ("Pu.1", "Gfi1 enhancer", "Activates"),
    ("Erg", "Gfi1 enhancer", "Activates"),
    ("Meis1", "Gfi1 enhancer", "Activates"),
    ("Runx1", "Gfi1 enhancer", "Activates"),
    ("Gata2", "Runx1 enhancer", "Activates"),
    ("Fli1", "Runx1 enhancer", "Activates"),
    ("Elf1", "Runx1 enhancer", "Activates"),
    ("Scl", "Runx1 enhancer", "Activates"),
    ("Lmo2", "Runx1 enhancer", "Activates"),
    ("Ldb1", "Runx1 enhancer", "Activates"),
    ("Fli1", "Lyl1 promoter", "Activates"),
    ("Elf1", "Lyl1 promoter", "Activates"),
    ("Erg", "Lyl1 promoter", "Activates"),
    ("Pu.1", "Lyl1 promoter", "Activates"),
    ("Gata2", "Lyl1 promoter", "Activates"),
    ("PU.1", "Elf1 promoter", "Inhibits"),
    ("Ets/GATA", "Scl", "Motif-binding"),
    ("Ets/GATA", "Fli1", "Motif-binding"),
    ("Ets/GATA", "Gata2", "Motif-binding"),
    ("Ets/GATA", "Hhex", "Motif-binding"),
    ("Ets/GATA", "Smad6", "Motif-binding"),
    ("Scl", "Gfi1 -35 kb", "Co-binding"),
    ("Lmo2", "Gfi1 -35 kb", "Co-binding"),
    ("Lyl1", "Gfi1 -35 kb", "Co-binding"),
    ("Runx1", "+23 kb Runx1 enhancer", "Autoregulates")
]



print("Checking for conflicts in the graph drawing edges:")
conflicts1 = check_conflicts(edges_from_graph_drawing)
if conflicts1:
    for conflict in conflicts1:
        print(conflict)
else:
    print("No conflicts found in the graph drawing edges.")

print("\nChecking for conflicts in interactions_list1:")
conflicts2 = check_conflicts(interactions_list1)
if conflicts2:
    for conflict in conflicts2:
        print(conflict)
else:
    print("No conflicts found in interactions_list1.")

print("\nChecking for conflicts in interactions_list2:")
conflicts3 = check_conflicts(interactions_list2)
if conflicts3:
    for conflict in conflicts3:
        print(conflict)
else:
    print("No conflicts found in interactions_list2.")

print("\nChecking for conflicts in interactions_list3:")
conflicts4 = check_conflicts(interactions_list3)
if conflicts4:
    for conflict in conflicts4:
        print(conflict)
else:
    print("No conflicts found in interactions_list3.")

print("\nChecking for conflicts in interactions_list4:")
conflicts5 = check_conflicts(interactions_list4)
if conflicts5:
    for conflict in conflicts5:
        print(conflict)
else:
    print("No conflicts found in interactions_list4.")

dataclean = data.drop_duplicates()

display(dataclean)
dataclean.to_csv('cleaned_file.csv', index=False)

import pandas as pd

parameter_path = r"/content/parameters.dat"

parameter_df = pd.read_csv(parameter_path, sep="\t", comment="#")

print("RACIPE Parameters:")
print(parameter_df.to_string())

#column 1: 100 models
#column 2: number of steady states in each model
#column 3 onwards in prs (notepad) (for each model)
#trd: threshold
#act and inh: fold change (activation and inhibition)
#num: hill's coefficient

parameter_path = r"/content/parameters.dat"

parameter_df = pd.read_csv(parameter_path, sep="\t", comment="#")

# Display the DataFrame without the index
print("RACIPE Parameters:")
print(parameter_df.to_string(index=False))

parameter_df.to_csv('racipe_parameters.csv', index=False)

print("\nRACIPE parameters saved to 'racipe_parameters.csv'.")

with open("/content/headingiees.txt", 'r') as f:
  reader = [line.strip().split() for line in f]

reader

import csv

output_filename = 'output_list.csv'
.

flattened_list = [item for sublist in reader for item in sublist]

with open(output_filename, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(flattened_list) # Writes the entire flattened list as one row

print(f"List saved to {output_filename} in a single row.")

import pandas as pd


parameter_df = pd.read_csv(parameter_path, sep="\t", comment="#", header=None)


with open("/content/headingiees.txt", 'r', encoding='utf-8') as f:
    headings = [line.strip() for line in f]


if len(headings) != parameter_df.shape[1]:
    raise ValueError(f"Mismatch: {len(headings)} headings but {parameter_df.shape[1]} columns in data!")

parameter_df.columns = headings

parameter_df.to_csv("/content/headings.txt", sep="\t", index=False)

print("Headings successfully assigned and saved!")

num_columns = parameter_df.shape[1]

print(f"\nNumber of columns in the table: {num_columns}")

#each row in first column in prs represents each column/parameter for each here

import pandas as pd

solution_path = r"/content/solution.dat"

solution_df = pd.read_csv(solution_path, sep="\t", comment="#")

print(" RACIPE Solutions:")
print(solution_df.to_string())
# Save the RACIPE solutions to a CSV file
solution_df.to_csv("RACIPE_solutions.csv", index=False)

#column 1: parameter/models
#column 2: steady states
#column 3: Number of initial conditions in each steady state out of 100 initial conditions in each model
#column 4 onwards: expression level of each gene (32 genes) in log

data = """ 305.936220  26.732281   1.706107  88.031279  758.582098  67.617246  21.597931  8613.851442  51.956595  519.306121  27.778392  71.976838  62.476538  23.801712  24.618030  99.729331  28.053717  68.006036  87.342219  42.032413  82.842538  88.739058  82.580619  62.829120  10.417781  46.045639   95.167780  51.168146  43.359474  21.283060  21.125654  306.468428  0.830016  0.819090  0.198215  0.403464  0.923952  0.520082  0.629707  0.322926  0.678480  0.510412  0.113198  0.308487  0.789956  0.850595  0.935347  0.830578  0.861124  0.443115  0.906682  0.818262  0.224782  0.811179  0.391508  0.209764  0.690642  0.441061  0.593772  0.441963  0.963633  0.503561  0.505400  0.328521  0.741246  2.000000  78.007461  1.434240  4.000000  0.024076  1.666158  3.000000  97.191463    3.118252  1.000000  87.208502   7.312716  4.000000.1  51.869403  1.368986  5.000000  0.023077  1.836721  2.000000.1  82.120227  0.444866  1.000000.1  41.110396  0.452939  3.000000.1  64.294557  1.350658  2.000000.2  0.016468  1.150510  4.000000.2  0.010010  17.284995  2.000000.3  56.406807  0.418422  4.000000.3  0.015945  1.126972  2.000000.4  33.315211  1.171209  6.000000  44.401867  5.700780  3.000000.2  0.011591  1.456501  6.000000.1  91.907943   6.106226  6.000000.2  0.029460  1.351101  2.000000.5  57.365178  146.639749  6.000000.3  25.408723   7.333887  6.000000.4  68.328194  0.366290  6.000000.5  17.355253  57.098602  4.000000.4  70.497900  1.013630  2.000000.6  0.114840   7.061490  1.000000.2  0.027971  29.528260  4.000000.5  38.226058  0.774148  5.000000.1  39.098131  0.600089  3.000000.3  92.920288   72.579306  4.000000.6  78.836182   79.423900  2.000000.7  18.848404  1.627250  3.000000.4  35.669195  0.218830  3.000000.5  41.788844  1.642352  2.000000.8  82.673271  1.032854  6.000000.6  0.010632  1.594913  4.000000.7  83.973479  2.114354  5.000000.2  77.426420  2.248290  3.000000.6  58.229452  44.158583  1.000000.3  90.638210  0.712093  5.000000.3  37.355227  156.234455  4.000000.8  17.567981  120.561894  5.000000.4  36.886501  2.306666  6.000000.7  34.218879  1.137828  6.000000.8  86.584322  3.261179  6.000000.9  57.888880  0.913821  5.000000.5  29.974915   11.558192  4.000000.9  0.019266   66.557539  5.000000.6  0.016020   43.730867  3.000000.7  60.573420   68.381444  2.000000.9  42.898431  0.631269  2.000000.10  22.949909   44.537881  5.000000.7  0.287266  24.221404  4.000000.10  0.022985  24.142729  6.000000.10  0.032163  1.279822  2.000000.11  50.021820  0.260207  6.000000.11  0.014314  2.217244  5.000000.8  25.275393  1.455047  5.000000.9  35.556714  0.335896  1.000000.4  59.919787   78.802642  3.000000.8  29.986350  140.929332  2.000000.12  24.204074  0.221943  1.000000.5  33.985069  40.188900  3.000000.9  48.043385  128.339440  1.000000.6  73.792051  1.463141  5.000000.10  63.065033  0.221480  3.000000.10  28.779482"""  # ← continue with the full pasted data


num_values = len(data.split())
print("Number of values:", num_values)

import pandas as pd

df = pd.read_csv("HSC Data - RACIPE data.csv")

prod_columns = [col for col in df.columns if col.startswith("Prod_of_")]
deg_columns = [col for col in df.columns if col.startswith("Deg_of_")]


prod_df = df[prod_columns]
deg_df = df[deg_columns]

# Compute normalization factors: fi = gi / ki
f_df = prod_df.values / deg_df.values

# Dataframe
gene_names = [col.replace("Prod_of_", "") for col in prod_columns]
f_df_display = pd.DataFrame(f_df, columns=gene_names)

pd.set_option('display.max_rows', None)
print(f_df_display)

f_df_display.to_csv("normalization_factors.csv", index=False)

import pandas as pd
import numpy as np

expression_df = pd.read_csv("/content/HSC Data - SOLUTIONS (1).csv")#e_i

factors_df = pd.read_csv("/content/normalization_factors (2).csv")#f_i


common_genes = expression_df.columns.intersection(factors_df.columns)
expression_df = expression_df[common_genes]
factors_df = factors_df[common_genes]
E_in = (expression_df / factors_df)


normalized_df = pd.DataFrame(E_in, columns=common_genes)
normalized_df.to_csv("normalizedexpressions.csv", index=False)

print(" Normalized expression saved to 'normalized_expressionlala.csv'")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

expression_df = pd.read_csv("HSC Data - SOLUTIONS (1).csv")
factors_df = pd.read_csv("normalization_factors (2).csv")


common_genes = expression_df.columns.intersection(factors_df.columns)
expression_df = expression_df[common_genes]
factors_df = factors_df[common_genes]

normalized_matrix = expression_df / factors_df

all_values = normalized_matrix.values.flatten()
plt.figure(figsize=(10, 6))
sns.histplot(all_values, bins=100, kde=True, color='teal')
plt.title("Distribution of Normalized Expression Values (Ei / fi)", fontsize=14)
plt.xlabel("Normalized Value (Ei / fi)")
plt.ylabel("Frequency")
plt.grid(True)
plt.tight_layout()
plt.show()

min_val = all_values.min()
max_val = all_values.max()

print(f"Minimum value in distribution: {min_val}")
print(f"Maximum value in distribution: {max_val}")

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.histplot(all_values, kde=True, bins=100)
plt.ticklabel_format(style='plain', axis='x')

plt.title("Distribution of Normalized Expression Values (Ei / fi)")
plt.xlabel("Normalized Value (Ei / fi)")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

import pandas as pd


expression_df = pd.read_csv("/content/HSC Data - SOLUTIONS.csv")
factors_df = pd.read_csv("/content/normalization_factors (2).csv")

print("Expression data preview:\n", expression_df.head())
print("\nNormalization factors preview:\n", factors_df.head())

print("Expression columns:", list(expression_df.columns))
print("Factor columns:", list(factors_df.columns))

# See which columns match
common_genes = expression_df.columns.intersection(factors_df.columns)
print("Common genes:", list(common_genes))

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/normalized_expressionlala (1).csv")

if 'Unnamed: 0' in df.columns:
    df = df.drop(columns='Unnamed: 0')

sns.set(font_scale=0.9)

g = sns.clustermap(
   df,
        cmap="vlag",
        standard_scale=1,
        row_cluster=True,
        col_cluster=True,  # No dendrograms (not pos!)
        cbar_pos=(0.02, 0.8, 0.05, 0.18)

)

plt.setp(g.ax_heatmap.get_xticklabels(), rotation=90, ha='right', fontsize=8)

]
g.fig.suptitle("Clustered Normalized Gene Expression Heatmap", fontsize=14, y=1.05)

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.clustermap(
    df,
    cmap="vlag",         # red white and blue lol
    figsize=(14, 10),    # adjust
    row_cluster=True,    # cluster rows (samples)
    col_cluster=True,    # cluster columns (genes)
    xticklabels=True,    # show gene names
    yticklabels=False
)

plt.title("Clustered Normalized Gene Expression Heatmap", pad=100)
plt.show()

import pandas as pd

# g/k normalized values
df = pd.read_csv("/content/normalized_expressionlala (1).csv", index_col=0)

# Binarize: ON (1) if value >= 1, else OFF (0)
binary_df = (df >= 1).astype(int)
binary_df.to_csv("binarized_expression.csv")

import pandas as pd

# Load the full expression matrix (make sure the first column is not being treated as data)
df = pd.read_csv("/content/normalized_expressionlala.csv", index_col=0)

print(f"Shape: {df.shape}")
print(df.head())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

expression_df = pd.read_csv("normalized_expressionlala.csv", index_col=0)

all_values = expression_df.values.flatten()

plt.figure(figsize=(10, 6))
sns.histplot(all_values, bins=100, kde=True, color='skyblue', edgecolor='black')
plt.title("Distribution of Normalized RACIPE Expression Values (Ei / fi)", fontsize=14)
plt.xlabel("Expression value (Ei / fi)", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(True)


plt.tight_layout()
plt.savefig("expression_distribution.png", dpi=300)

plt.show()

import pandas as pd
df = pd.read_csv("/content/normalized_expressionlala.csv", index_col=0)

binarized_df = (df >= 0).astype(int)
print("Binarized RACIPE expression matrix (preview):")
print(binarized_df.head())

binarized_df.to_csv("binarized_expression.csv")
print("\nBinarized data saved to 'binarized_expression.csv'")